const { Pool } = require('pg');
require('dotenv').config();

// Ë≥áÊñôÂ∫´ÈÄ£Á∑öË®≠ÂÆö
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'ltc',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  max: 20, // ÊúÄÂ§ßÈÄ£Á∑öÊï∏
  idleTimeoutMillis: 30000, // ÈñíÁΩÆÈÄ£Á∑öË∂ÖÊôÇ
  connectionTimeoutMillis: 2000, // ÈÄ£Á∑öË∂ÖÊôÇ
});

// Ê∏¨Ë©¶Ë≥áÊñôÂ∫´ÈÄ£Á∑ö
pool.on('connect', () => {
  console.log('‚úÖ Ë≥áÊñôÂ∫´ÈÄ£Á∑öÊàêÂäü');
});

pool.on('error', (err) => {
  console.error('‚ùå Ë≥áÊñôÂ∫´ÈÄ£Á∑öÈåØË™§:', err);
});

// Ê∏¨Ë©¶ÈÄ£Á∑öÂáΩÊï∏
const testConnection = async () => {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    console.log('üìä Ë≥áÊñôÂ∫´ÈÄ£Á∑öÊ∏¨Ë©¶ÊàêÂäü:', result.rows[0].now);
    client.release();
    return true;
  } catch (err) {
    console.error('‚ùå Ë≥áÊñôÂ∫´ÈÄ£Á∑öÊ∏¨Ë©¶Â§±Êïó:', err.message);
    return false;
  }
};

// Á¢∫‰øùÂÆ∂Â∫≠ÂäüËÉΩÁõ∏ÈóúË≥áÊñôË°®
const ensureFamilySchema = async () => {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // families
    await client.query(`
      CREATE TABLE IF NOT EXISTS families (
        id SERIAL PRIMARY KEY,
        name TEXT,
        owner_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);

    // family_members
    await client.query(`
      CREATE TABLE IF NOT EXISTS family_members (
        id SERIAL PRIMARY KEY,
        family_id INTEGER NOT NULL REFERENCES families(id) ON DELETE CASCADE,
        user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(family_id, user_id)
      );
    `);

    await client.query(`CREATE INDEX IF NOT EXISTS idx_family_members_family ON family_members(family_id);`);
    await client.query(`CREATE INDEX IF NOT EXISTS idx_family_members_user ON family_members(user_id);`);

    // family_invitations
    await client.query(`
      CREATE TABLE IF NOT EXISTS family_invitations (
        id SERIAL PRIMARY KEY,
        family_id INTEGER REFERENCES families(id) ON DELETE CASCADE,
        inviter_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        invitee_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        status TEXT NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    await client.query(`CREATE INDEX IF NOT EXISTS idx_family_invite_invitee ON family_invitations(invitee_id);`);
    await client.query(`CREATE INDEX IF NOT EXISTS idx_family_invite_status ON family_invitations(status);`);

    // calendar_eventsÔºàÂÆ∂Â∫≠ÂÖ±Áî®Ë°å‰∫ãÊõÜÔºâ
    await client.query(`
      CREATE TABLE IF NOT EXISTS calendar_events (
        id SERIAL PRIMARY KEY,
        family_id INTEGER NOT NULL REFERENCES families(id) ON DELETE CASCADE,
        author_user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        title TEXT NOT NULL,
        content TEXT,
        start_time TIMESTAMP WITH TIME ZONE NOT NULL,
        end_time TIMESTAMP WITH TIME ZONE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `);
    await client.query(`CREATE INDEX IF NOT EXISTS idx_calendar_events_family ON calendar_events(family_id);`);
    await client.query(`CREATE INDEX IF NOT EXISTS idx_calendar_events_timerange ON calendar_events(start_time, end_time);`);

    // ÂÖºÂÆπÊÄßÔºöÊñ∞Â¢û color Ê¨Ñ‰ΩçÔºà‰∫ã‰ª∂È°èËâ≤Ôºâ
    await client.query(`ALTER TABLE calendar_events ADD COLUMN IF NOT EXISTS color TEXT;`);

    await client.query('COMMIT');
    console.log('üß© ÂÆ∂Â∫≠ÂäüËÉΩË≥áÊñôË°®Â∑≤Â∞±Á∑í');
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå Âª∫Á´ãÂÆ∂Â∫≠ÂäüËÉΩË≥áÊñôË°®Â§±Êïó:', error.message);
    throw error;
  } finally {
    client.release();
  }
};

module.exports = {
  pool,
  testConnection,
  ensureFamilySchema
};
